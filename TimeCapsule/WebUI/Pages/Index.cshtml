@page
@{
    ViewData["Title"] = "Home";
}
<style>
    .colorful {
        vertical-align: middle;
        display: inline-block;
        width: 48px;
        height: 48px;
        background-color: var(--mycolor);
        -webkit-mask: var(--pic) no-repeat;
        mask: var(--pic);
        -webkit-mask-size: 100% 100%;
        mask-size: 100% 100%;
    }

    .colorful_large {
        vertical-align: middle;
        display: inline-block;
        width: 60px;
        height: 60px;
        background-color: var(--mycolor);
        -webkit-mask: var(--pic) no-repeat;
        mask: var(--pic);
        -webkit-mask-size: 100% 100%;
        mask-size: 100% 100%;
    }

    .taskContainer {
        margin: 20px;
        display: inline-block;
        height: 60px;
        width: 60px;
        text-align: center;
    }

    .countingContainer {
        margin: 10px;
        padding-left:10px;
        padding-right:10px;
        display: inline-block;
        height: 60px;
        font-size: 20px;
        text-align: center;
        border: 1px solid red;
        border-radius: 5px;
    }

    .right_div {
        display: inline-block;
        vertical-align: top;
        width: 35%;
        height: 100%;
    }

    .left_div {
        display: inline-block;
        vertical-align: top;
        width: 60%;
        height: 100%;
    }
    .mytitle {
        font-size: 20px;
        font-family: "Microsoft YaHei";
    }
</style>
<script type="text/javascript" src="~/js/echarts.min.js"></script>
<script type="text/javascript">
    document.onreadystatechange = loadAsync;
    // 在网页加载后请求数据
    function loadAsync() {
        if (document.readyState == "complete") {
            loadTodayPeriods();
            loadTasks();
            loadYesterdayPeriods();
        }
    }
    // 请求今天的时间段数据
    function loadTodayPeriods() {
        var _date = new Date();
        var dd = _date.getDate();
        var mm = _date.getMonth() + 1;
        var yyyy = _date.getFullYear();
        mm_str = "" + mm;
        dd_str = "" + dd;
        if (mm < 10)
            mm_str = "0" + mm;
        if (dd < 10)
            dd_str = "0" + dd;
        var int_date = yyyy + "" + mm_str + "" + dd_str;

        $.ajax({
            url: "/api/user/period/calendar/" + int_date,
            type: "get",
            dataType: "json",
            async: false,

            success: function (data) {
                dataprocess_currentP(data);
            },

            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(XMLHttpRequest.readyState + " " + XMLHttpRequest.status + " " + XMLHttpRequest.responseText);
            }
        });
    }
    function loadYesterdayPeriods() {
        var _date = new Date();
        _date.setDate(_date.getDate() - 1);
        var dd = _date.getDate();
        var mm = _date.getMonth() + 1;
        var yyyy = _date.getFullYear();
        mm_str = "" + mm;
        dd_str = "" + dd;
        if (mm < 10)
            mm_str = "0" + mm;
        if (dd < 10)
            dd_str = "0" + dd;
        var int_date = yyyy + "" + mm_str + "" + dd_str;

        $.ajax({
            url: "/api/user/period/calendar/" + int_date,
            type: "get",
            dataType: "json",
            async: false,

            success: function (data) {
                drawYeasterday(data);
            },

            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(XMLHttpRequest.readyState + " " + XMLHttpRequest.status + " " + XMLHttpRequest.responseText);
            }
        });
    }
    // query tasks
    function loadTasks() {
        $.ajax({
            url: "/api/user/task",
            type: "get",
            dataType: "json",
            async: false,

            success: function (data) {
                dataprocess_task(data);
                showCounting(data);
            },

            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(XMLHttpRequest.readyState + " " + XMLHttpRequest.status + " " + XMLHttpRequest.responseText);
            }
        });
    }

    // 处理进行中的任务
    var counting_arr = new Array();
    var counting_arr_date = new Array();
    function dataprocess_currentP(d) {
        counting_arr = new Array();
        counting_arr_date = new Array();
        var no_proceding = true;
        var htmldata = "";
        var count = 0;
        for (var i = 0; i < d.periods.length; i++) {
            if (d.periods[i].isFinish == false) {
                no_proceding = false;
                htmldata += "<div class=\"colorful\" style=\"--pic:url('/img/" + d.periods[i].task.icon + "'); --mycolor:" + d.periods[i].task.taskClass.color + " \" ></div>";
                htmldata += "<p id=\"mycount_p" + count + "\" style=\"display: inline\"> </p>";
                htmldata += "<button class='btn btn-info btn-sm' style=\"display: inline; vertical-align: middle; margin-left:3px;\" onclick=\"finishPeriod('" + d.periods[i].id + "')\">结束</button>";
                counting_arr.push("mycount_p" + count);
                var b_temp = d.periods[i].beginTime.split(",");
                temp = new Date(b_temp[0], b_temp[1], b_temp[2], b_temp[3], b_temp[4], b_temp[5]);

                counting_arr_date.push(temp);
                count++;
            }
        }

        if (no_proceding) {
            $("#proceding_div").html("<p style='color:#808080;'>没有正在进行的任务</p>");
            window.clearInterval("display_count()");
        }
        else {
            $("#proceding_div").html(htmldata);
            window.clearInterval("display_count()");
            display_count();
            window.setInterval("display_count()", 1000);
        }
    }

    // show tasks
    function dataprocess_task(d) {
        var htmldata = "";

        for (var i = 0; i < d.tasks.length; i++) {
            htmldata += "<div class='taskContainer' \">"
            htmldata += "<div onclick=\"startTask('" + d.tasks[i].id + "')\" class=\"colorful\" style=\"--pic:url('/img/" + d.tasks[i].icon + "'); --mycolor:" + d.tasks[i].taskClass.color + ";cursor: pointer; \" ></div>";
            htmldata += "<p>" + d.tasks[i].name + "</p>";
            htmldata += "</div>"

        }
        $("#start_new_task").html(htmldata);
    }

    // 定时刷新进行时间
    function display_count() {
        for (var i = 0; i < counting_arr.length; i++) {
            var now = new Date();
            now.setHours(now.getHours() - counting_arr_date[i].getHours());
            now.setMinutes(now.getMinutes() - counting_arr_date[i].getMinutes());
            now.setSeconds(now.getSeconds() - counting_arr_date[i].getSeconds());
            minutes = now.getMinutes();
            seconds = now.getSeconds();
            if (minutes < 10)
                minutes = "0" + minutes;
            if (seconds < 10)
                seconds = "0" + seconds;
            $("#" + counting_arr[i]).html(now.getHours() + ":" + minutes + ":" + seconds);
        }
    }
    // button
    function finishPeriod(id) {
        var now = new Date();
        var jobj = {};
        jobj.isFinish = true;
        jobj.endTime = getFormatDate(now);
        jstr = JSON.stringify(jobj);

        $.ajax({
            url: "/api/user/period/finish/" + id,
            type: "put",
            data: jstr,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            async: false,
            //TODO: Error Process
            success: function (data) {
                loadTodayPeriods();
            },

            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(XMLHttpRequest.readyState + " " + XMLHttpRequest.status + " " + XMLHttpRequest.responseText);
            }
        });
    }
    // button
    function startTask(id) {
        var now = new Date();
        var jobj = {};
        jobj.isFinish = false;
        jobj.taskId = id;
        jobj.beginTime = getFormatDate(now);
        jstr = JSON.stringify(jobj);

        $.ajax({
            url: "/api/user/period",
            type: "post",
            data: jstr,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            async: false,
            //TODO: Error Process
            success: function (data) {
                loadTodayPeriods();
            },

            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(XMLHttpRequest.readyState + " " + XMLHttpRequest.status + " " + XMLHttpRequest.responseText);
            }
        });
    }
    // format date for http request
    function getFormatDate(date) {
        var yyyy = date.getFullYear().toString();
        var MM = (date.getMonth() + 1).toString();
        var dd = date.getDate().toString();
        var HH = date.getHours().toString();
        var mm = date.getMinutes().toString();
        var ss = date.getSeconds().toString();
        if (MM.length < 2)
            MM = "0" + MM;
        if (dd.length < 2)
            dd = "0" + dd;
        if (mm.length < 2)
            mm = "0" + mm;
        if (HH.length < 2)
            HH = "0" + HH;
        if (ss.length < 2)
            ss = "0" + ss;
        return yyyy + "-" + MM + "-" + dd + "T" + HH + ":" + mm + ":" + ss;
    }
    // draw pie chart
    function drawYeasterday(d) {
        var myChart = echarts.init(document.getElementById("yeasterday_pie"));
        var names = new Array();
        var colors = new Array();
        var times = new Array();
        for (var i = 0; i < d.periods.length; i++) {
            if (d.periods[i].endTime != null) {
                var b_temp = d.periods[i].beginTime.split(",");
                var begin = new Date(b_temp[0], b_temp[1], b_temp[2], b_temp[3], b_temp[4], b_temp[5]);
                b_temp = d.periods[i].endTime.split(",");
                var end = new Date(b_temp[0], b_temp[1], b_temp[2], b_temp[3], b_temp[4], b_temp[5]);
                var time = ((end.getTime() - begin.getTime()) / 1000 / 3600).toFixed(2);
                var index = -1;
                for (var j = 0; j < names.length; j++) {
                    if (names[j] == d.periods[i].task.taskClass.name) {
                        index = j;
                        break;
                    }
                }
                if (index == -1) {
                    names.push(d.periods[i].task.taskClass.name);
                    colors.push(d.periods[i].task.taskClass.color);
                    times.push(time);
                } else {
                    times[index] = Number(times[index]) + Number(time);
                }
            }
        }
        var datajobj = new Array(); // dataobj[i].name, and .value
        var time_sum = 0;
        for (var i = 0; i < names.length; i++) {
            datajobj[i] = {};
            datajobj[i].name = names[i];
            datajobj[i].value = times[i];
            time_sum += Number(times[i]);
        }
        if (time_sum < 24) {
            names.push("未记录时间");
            colors.push("#666666");
            datajobj[names.length - 1] = {};
            datajobj[names.length - 1].name = "未记录时间";
            datajobj[names.length - 1].value = (24 - time_sum);
        }
        var option = {
            tooltip: {
                trigger: 'item',
                formatter: "{a} <br/>{b}: {c} ({d}%)"
            },
            color: colors,
            legend: {
                orient: 'horizontal',
                x: 'left',
                data: names
            },
            series: [{
                name: '总计时间(小时)',
                type: 'pie',
                radius: ['30%', '70%'],
                avoidLabelOverlap: false,
                label: {
                    normal: {
                        show: false,
                        position: 'center'
                    },
                    emphasis: {
                        show: true,
                        textStyle: {
                            fontSize: '18'
                        }
                    }
                },
                labelLine: {
                    normal: {
                        show: false
                    }
                },
                data: datajobj
            }]
        };
        if (option && typeof option === "object") {
            myChart.setOption(option, true);
        }
    }
    // show counting task
    function showCounting(d) {
        var htmldata = "";
        for (var i = 0; i < d.tasks.length; i++) {
            if (d.tasks[i].isCounting == true) {
                var begin = new Date();
                var b_temp = d.tasks[i].deadLine.split(",");
                var end = new Date(b_temp[0], b_temp[1] - 1, b_temp[2], b_temp[3], b_temp[4], b_temp[5]);
                var days = ((end.getTime() - begin.getTime()) / 1000 / 3600 / 24).toFixed(0);

                htmldata += "<div class='countingContainer'>";
                htmldata += "<div class=\"colorful_large\" style=\"--pic:url('/img/" + d.tasks[i].icon + "'); --mycolor:" + d.tasks[i].taskClass.color + "; \" ></div>";
                htmldata += "<p style=\"display: inline; vertical-align: middle; margin-left:10px;\">剩余" + days + "天</p>";
                htmldata += "</div>";
            }
        }
        if (htmldata != "") {
            htmldata = "<p class='mytitle'>任务的死亡之线</p>" + htmldata;  
        }
        $("#counting").html(htmldata);
    }

</script>
<div class="container" style="height: 800px">
    <div class="left_div">
        <h1 class="display-4">Welcome</h1>

        <div style="margin-top:20px" id="counting"></div>

        <div style="margin-top:20px" name="preceding_period">
            <p class='mytitle' id="proceding_p">正在进行的任务</p>
            <div id="proceding_div"> </div>
        </div>

        <div style="margin-top: 20px" name="start_new_task(period)">
            <p class='mytitle'>开始新任务</p>
            <div style="border: 1px solid #808080; border-radius:10px" id="start_new_task">
                <!-- img button here -->
            </div>
        </div>

    </div>

    <div class="right_div">
        <p class='mytitle'>昨日时间统计</p>
        <div id="yeasterday_pie" style="height: 50%"></div>
    </div>

</div>

